Grammar

    0 $accept: compileunit $end

    1 compileunit: declaration
    2            | statement
    3            | compileunit declaration
    4            | compileunit statement

    5 declaration: datadeclaration
    6            | functiondeclaration

    7 functiondeclaration: typespecifier IDENTIFIER '(' datadeclarations ')' statement

    8 datadeclarations: datadeclaration
    9                 | datadeclarations ',' datadeclaration

   10 datadeclaration: typespecifier IDENTIFIER ';'
   11                | typespecifier IDENTIFIER '=' datavalue

   12 typespecifier: INT
   13              | DOUBLE
   14              | STRING
   15              | VOID

   16 datavalue: NUMBER
   17          | STRING

   18 statement: exprstatement
   19          | emptystatement
   20          | whilestatement
   21          | ifstatement
   22          | forstatement
   23          | breakstatement
   24          | returnstatement
   25          | continuestatement
   26          | compoundstatement

   27 compoundstatement: '{' statement '}'
   28                  | '{' '}'

   29 breakstatement: BREAK ';'

   30 returnstatement: RETURN expr ';'
   31                | RETURN ';'

   32 continuestatement: CONTINUE ';'

   33 exprstatement: expr ';'

   34 emptystatement: ';'

   35 whilestatement: WHILE '(' expr ')' statement

   36 forstatement: FOR '(' forprimitive forprimitive ')' statement
   37             | FOR '(' forprimitive forprimitive expr ')' statement

   38 forprimitive: exprstatement
   39             | emptystatement

   40 ifstatement: IF '(' expr ')' statement
   41            | IF '(' expr ')' statement ELSE statement

   42 expr: NUMBER
   43     | IDENTIFIER
   44     | '(' expr ')'
   45     | IDENTIFIER '=' expr
   46     | expr PLUS expr
   47     | expr '-' expr
   48     | expr '*' expr
   49     | expr '/' expr
   50     | expr '<' expr
   51     | expr '>' expr
   52     | expr LE expr
   53     | expr GE expr
   54     | expr EQ expr
   55     | expr NE expr
   56     | expr AND expr
   57     | expr OR expr
   58     | NOT expr
   59     | PLUS expr
   60     | '-' expr


Terminals, with rules where they appear

$end (0) 0
'(' (40) 7 35 36 37 40 41 44
')' (41) 7 35 36 37 40 41 44
'*' (42) 48
',' (44) 9
'-' (45) 47 60
'/' (47) 49
';' (59) 10 29 30 31 32 33 34
'<' (60) 50
'=' (61) 11 45
'>' (62) 51
'{' (123) 27 28
'}' (125) 27 28
error (256)
NUMBER (258) 16 42
IDENTIFIER (259) 7 10 11 43 45
IF (260) 40 41
WHILE (261) 35
FOR (262) 36 37
BREAK (263) 29
CONTINUE (264) 32
RETURN (265) 30 31
INT (266) 12
DOUBLE (267) 13
VOID (268) 15
STRING (269) 14 17
IFRULE (270)
OR (271) 57
AND (272) 56
EQ (273) 54
NE (274) 55
GE (275) 53
LE (276) 52
PLUS (277) 46 59
ELSE (278) 41
UNARYOP (279)
NOT (280) 58


Nonterminals, with rules where they appear

$accept (38)
    on left: 0
compileunit (39)
    on left: 1 2 3 4, on right: 0 3 4
declaration (40)
    on left: 5 6, on right: 1 3
functiondeclaration (41)
    on left: 7, on right: 6
datadeclarations (42)
    on left: 8 9, on right: 7 9
datadeclaration (43)
    on left: 10 11, on right: 5 8 9
typespecifier (44)
    on left: 12 13 14 15, on right: 7 10 11
datavalue (45)
    on left: 16 17, on right: 11
statement (46)
    on left: 18 19 20 21 22 23 24 25 26, on right: 2 4 7 27 35 36 37
    40 41
compoundstatement (47)
    on left: 27 28, on right: 26
breakstatement (48)
    on left: 29, on right: 23
returnstatement (49)
    on left: 30 31, on right: 24
continuestatement (50)
    on left: 32, on right: 25
exprstatement (51)
    on left: 33, on right: 18 38
emptystatement (52)
    on left: 34, on right: 19 39
whilestatement (53)
    on left: 35, on right: 20
forstatement (54)
    on left: 36 37, on right: 22
forprimitive (55)
    on left: 38 39, on right: 36 37
ifstatement (56)
    on left: 40 41, on right: 21
expr (57)
    on left: 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59
    60, on right: 30 33 35 37 40 41 44 45 46 47 48 49 50 51 52 53 54
    55 56 57 58 59 60


State 0

    0 $accept: . compileunit $end

    NUMBER      shift, and go to state 1
    IDENTIFIER  shift, and go to state 2
    IF          shift, and go to state 3
    WHILE       shift, and go to state 4
    FOR         shift, and go to state 5
    BREAK       shift, and go to state 6
    CONTINUE    shift, and go to state 7
    RETURN      shift, and go to state 8
    INT         shift, and go to state 9
    DOUBLE      shift, and go to state 10
    VOID        shift, and go to state 11
    STRING      shift, and go to state 12
    '-'         shift, and go to state 13
    PLUS        shift, and go to state 14
    NOT         shift, and go to state 15
    '('         shift, and go to state 16
    ';'         shift, and go to state 17
    '{'         shift, and go to state 18

    compileunit          go to state 19
    declaration          go to state 20
    functiondeclaration  go to state 21
    datadeclaration      go to state 22
    typespecifier        go to state 23
    statement            go to state 24
    compoundstatement    go to state 25
    breakstatement       go to state 26
    returnstatement      go to state 27
    continuestatement    go to state 28
    exprstatement        go to state 29
    emptystatement       go to state 30
    whilestatement       go to state 31
    forstatement         go to state 32
    ifstatement          go to state 33
    expr                 go to state 34


State 1

   42 expr: NUMBER .

    $default  reduce using rule 42 (expr)


State 2

   43 expr: IDENTIFIER .
   45     | IDENTIFIER . '=' expr

    '='  shift, and go to state 35

    $default  reduce using rule 43 (expr)


State 3

   40 ifstatement: IF . '(' expr ')' statement
   41            | IF . '(' expr ')' statement ELSE statement

    '('  shift, and go to state 36


State 4

   35 whilestatement: WHILE . '(' expr ')' statement

    '('  shift, and go to state 37


State 5

   36 forstatement: FOR . '(' forprimitive forprimitive ')' statement
   37             | FOR . '(' forprimitive forprimitive expr ')' statement

    '('  shift, and go to state 38


State 6

   29 breakstatement: BREAK . ';'

    ';'  shift, and go to state 39


State 7

   32 continuestatement: CONTINUE . ';'

    ';'  shift, and go to state 40


State 8

   30 returnstatement: RETURN . expr ';'
   31                | RETURN . ';'

    NUMBER      shift, and go to state 1
    IDENTIFIER  shift, and go to state 2
    '-'         shift, and go to state 13
    PLUS        shift, and go to state 14
    NOT         shift, and go to state 15
    '('         shift, and go to state 16
    ';'         shift, and go to state 41

    expr  go to state 42


State 9

   12 typespecifier: INT .

    $default  reduce using rule 12 (typespecifier)


State 10

   13 typespecifier: DOUBLE .

    $default  reduce using rule 13 (typespecifier)


State 11

   15 typespecifier: VOID .

    $default  reduce using rule 15 (typespecifier)


State 12

   14 typespecifier: STRING .

    $default  reduce using rule 14 (typespecifier)


State 13

   60 expr: '-' . expr

    NUMBER      shift, and go to state 1
    IDENTIFIER  shift, and go to state 2
    '-'         shift, and go to state 13
    PLUS        shift, and go to state 14
    NOT         shift, and go to state 15
    '('         shift, and go to state 16

    expr  go to state 43


State 14

   59 expr: PLUS . expr

    NUMBER      shift, and go to state 1
    IDENTIFIER  shift, and go to state 2
    '-'         shift, and go to state 13
    PLUS        shift, and go to state 14
    NOT         shift, and go to state 15
    '('         shift, and go to state 16

    expr  go to state 44


State 15

   58 expr: NOT . expr

    NUMBER      shift, and go to state 1
    IDENTIFIER  shift, and go to state 2
    '-'         shift, and go to state 13
    PLUS        shift, and go to state 14
    NOT         shift, and go to state 15
    '('         shift, and go to state 16

    expr  go to state 45


State 16

   44 expr: '(' . expr ')'

    NUMBER      shift, and go to state 1
    IDENTIFIER  shift, and go to state 2
    '-'         shift, and go to state 13
    PLUS        shift, and go to state 14
    NOT         shift, and go to state 15
    '('         shift, and go to state 16

    expr  go to state 46


State 17

   34 emptystatement: ';' .

    $default  reduce using rule 34 (emptystatement)


State 18

   27 compoundstatement: '{' . statement '}'
   28                  | '{' . '}'

    NUMBER      shift, and go to state 1
    IDENTIFIER  shift, and go to state 2
    IF          shift, and go to state 3
    WHILE       shift, and go to state 4
    FOR         shift, and go to state 5
    BREAK       shift, and go to state 6
    CONTINUE    shift, and go to state 7
    RETURN      shift, and go to state 8
    '-'         shift, and go to state 13
    PLUS        shift, and go to state 14
    NOT         shift, and go to state 15
    '('         shift, and go to state 16
    ';'         shift, and go to state 17
    '{'         shift, and go to state 18
    '}'         shift, and go to state 47

    statement          go to state 48
    compoundstatement  go to state 25
    breakstatement     go to state 26
    returnstatement    go to state 27
    continuestatement  go to state 28
    exprstatement      go to state 29
    emptystatement     go to state 30
    whilestatement     go to state 31
    forstatement       go to state 32
    ifstatement        go to state 33
    expr               go to state 34


State 19

    0 $accept: compileunit . $end
    3 compileunit: compileunit . declaration
    4            | compileunit . statement

    $end        shift, and go to state 49
    NUMBER      shift, and go to state 1
    IDENTIFIER  shift, and go to state 2
    IF          shift, and go to state 3
    WHILE       shift, and go to state 4
    FOR         shift, and go to state 5
    BREAK       shift, and go to state 6
    CONTINUE    shift, and go to state 7
    RETURN      shift, and go to state 8
    INT         shift, and go to state 9
    DOUBLE      shift, and go to state 10
    VOID        shift, and go to state 11
    STRING      shift, and go to state 12
    '-'         shift, and go to state 13
    PLUS        shift, and go to state 14
    NOT         shift, and go to state 15
    '('         shift, and go to state 16
    ';'         shift, and go to state 17
    '{'         shift, and go to state 18

    declaration          go to state 50
    functiondeclaration  go to state 21
    datadeclaration      go to state 22
    typespecifier        go to state 23
    statement            go to state 51
    compoundstatement    go to state 25
    breakstatement       go to state 26
    returnstatement      go to state 27
    continuestatement    go to state 28
    exprstatement        go to state 29
    emptystatement       go to state 30
    whilestatement       go to state 31
    forstatement         go to state 32
    ifstatement          go to state 33
    expr                 go to state 34


State 20

    1 compileunit: declaration .

    $default  reduce using rule 1 (compileunit)


State 21

    6 declaration: functiondeclaration .

    $default  reduce using rule 6 (declaration)


State 22

    5 declaration: datadeclaration .

    $default  reduce using rule 5 (declaration)


State 23

    7 functiondeclaration: typespecifier . IDENTIFIER '(' datadeclarations ')' statement
   10 datadeclaration: typespecifier . IDENTIFIER ';'
   11                | typespecifier . IDENTIFIER '=' datavalue

    IDENTIFIER  shift, and go to state 52


State 24

    2 compileunit: statement .

    $default  reduce using rule 2 (compileunit)


State 25

   26 statement: compoundstatement .

    $default  reduce using rule 26 (statement)


State 26

   23 statement: breakstatement .

    $default  reduce using rule 23 (statement)


State 27

   24 statement: returnstatement .

    $default  reduce using rule 24 (statement)


State 28

   25 statement: continuestatement .

    $default  reduce using rule 25 (statement)


State 29

   18 statement: exprstatement .

    $default  reduce using rule 18 (statement)


State 30

   19 statement: emptystatement .

    $default  reduce using rule 19 (statement)


State 31

   20 statement: whilestatement .

    $default  reduce using rule 20 (statement)


State 32

   22 statement: forstatement .

    $default  reduce using rule 22 (statement)


State 33

   21 statement: ifstatement .

    $default  reduce using rule 21 (statement)


State 34

   33 exprstatement: expr . ';'
   46 expr: expr . PLUS expr
   47     | expr . '-' expr
   48     | expr . '*' expr
   49     | expr . '/' expr
   50     | expr . '<' expr
   51     | expr . '>' expr
   52     | expr . LE expr
   53     | expr . GE expr
   54     | expr . EQ expr
   55     | expr . NE expr
   56     | expr . AND expr
   57     | expr . OR expr

    OR    shift, and go to state 53
    AND   shift, and go to state 54
    '<'   shift, and go to state 55
    '>'   shift, and go to state 56
    EQ    shift, and go to state 57
    NE    shift, and go to state 58
    GE    shift, and go to state 59
    LE    shift, and go to state 60
    '-'   shift, and go to state 61
    PLUS  shift, and go to state 62
    '*'   shift, and go to state 63
    '/'   shift, and go to state 64
    ';'   shift, and go to state 65


State 35

   45 expr: IDENTIFIER '=' . expr

    NUMBER      shift, and go to state 1
    IDENTIFIER  shift, and go to state 2
    '-'         shift, and go to state 13
    PLUS        shift, and go to state 14
    NOT         shift, and go to state 15
    '('         shift, and go to state 16

    expr  go to state 66


State 36

   40 ifstatement: IF '(' . expr ')' statement
   41            | IF '(' . expr ')' statement ELSE statement

    NUMBER      shift, and go to state 1
    IDENTIFIER  shift, and go to state 2
    '-'         shift, and go to state 13
    PLUS        shift, and go to state 14
    NOT         shift, and go to state 15
    '('         shift, and go to state 16

    expr  go to state 67


State 37

   35 whilestatement: WHILE '(' . expr ')' statement

    NUMBER      shift, and go to state 1
    IDENTIFIER  shift, and go to state 2
    '-'         shift, and go to state 13
    PLUS        shift, and go to state 14
    NOT         shift, and go to state 15
    '('         shift, and go to state 16

    expr  go to state 68


State 38

   36 forstatement: FOR '(' . forprimitive forprimitive ')' statement
   37             | FOR '(' . forprimitive forprimitive expr ')' statement

    NUMBER      shift, and go to state 1
    IDENTIFIER  shift, and go to state 2
    '-'         shift, and go to state 13
    PLUS        shift, and go to state 14
    NOT         shift, and go to state 15
    '('         shift, and go to state 16
    ';'         shift, and go to state 17

    exprstatement   go to state 69
    emptystatement  go to state 70
    forprimitive    go to state 71
    expr            go to state 34


State 39

   29 breakstatement: BREAK ';' .

    $default  reduce using rule 29 (breakstatement)


State 40

   32 continuestatement: CONTINUE ';' .

    $default  reduce using rule 32 (continuestatement)


State 41

   31 returnstatement: RETURN ';' .

    $default  reduce using rule 31 (returnstatement)


State 42

   30 returnstatement: RETURN expr . ';'
   46 expr: expr . PLUS expr
   47     | expr . '-' expr
   48     | expr . '*' expr
   49     | expr . '/' expr
   50     | expr . '<' expr
   51     | expr . '>' expr
   52     | expr . LE expr
   53     | expr . GE expr
   54     | expr . EQ expr
   55     | expr . NE expr
   56     | expr . AND expr
   57     | expr . OR expr

    OR    shift, and go to state 53
    AND   shift, and go to state 54
    '<'   shift, and go to state 55
    '>'   shift, and go to state 56
    EQ    shift, and go to state 57
    NE    shift, and go to state 58
    GE    shift, and go to state 59
    LE    shift, and go to state 60
    '-'   shift, and go to state 61
    PLUS  shift, and go to state 62
    '*'   shift, and go to state 63
    '/'   shift, and go to state 64
    ';'   shift, and go to state 72


State 43

   46 expr: expr . PLUS expr
   47     | expr . '-' expr
   48     | expr . '*' expr
   49     | expr . '/' expr
   50     | expr . '<' expr
   51     | expr . '>' expr
   52     | expr . LE expr
   53     | expr . GE expr
   54     | expr . EQ expr
   55     | expr . NE expr
   56     | expr . AND expr
   57     | expr . OR expr
   60     | '-' expr .

    $default  reduce using rule 60 (expr)


State 44

   46 expr: expr . PLUS expr
   47     | expr . '-' expr
   48     | expr . '*' expr
   49     | expr . '/' expr
   50     | expr . '<' expr
   51     | expr . '>' expr
   52     | expr . LE expr
   53     | expr . GE expr
   54     | expr . EQ expr
   55     | expr . NE expr
   56     | expr . AND expr
   57     | expr . OR expr
   59     | PLUS expr .

    $default  reduce using rule 59 (expr)


State 45

   46 expr: expr . PLUS expr
   47     | expr . '-' expr
   48     | expr . '*' expr
   49     | expr . '/' expr
   50     | expr . '<' expr
   51     | expr . '>' expr
   52     | expr . LE expr
   53     | expr . GE expr
   54     | expr . EQ expr
   55     | expr . NE expr
   56     | expr . AND expr
   57     | expr . OR expr
   58     | NOT expr .

    $default  reduce using rule 58 (expr)


State 46

   44 expr: '(' expr . ')'
   46     | expr . PLUS expr
   47     | expr . '-' expr
   48     | expr . '*' expr
   49     | expr . '/' expr
   50     | expr . '<' expr
   51     | expr . '>' expr
   52     | expr . LE expr
   53     | expr . GE expr
   54     | expr . EQ expr
   55     | expr . NE expr
   56     | expr . AND expr
   57     | expr . OR expr

    OR    shift, and go to state 53
    AND   shift, and go to state 54
    '<'   shift, and go to state 55
    '>'   shift, and go to state 56
    EQ    shift, and go to state 57
    NE    shift, and go to state 58
    GE    shift, and go to state 59
    LE    shift, and go to state 60
    '-'   shift, and go to state 61
    PLUS  shift, and go to state 62
    '*'   shift, and go to state 63
    '/'   shift, and go to state 64
    ')'   shift, and go to state 73


State 47

   28 compoundstatement: '{' '}' .

    $default  reduce using rule 28 (compoundstatement)


State 48

   27 compoundstatement: '{' statement . '}'

    '}'  shift, and go to state 74


State 49

    0 $accept: compileunit $end .

    $default  accept


State 50

    3 compileunit: compileunit declaration .

    $default  reduce using rule 3 (compileunit)


State 51

    4 compileunit: compileunit statement .

    $default  reduce using rule 4 (compileunit)


State 52

    7 functiondeclaration: typespecifier IDENTIFIER . '(' datadeclarations ')' statement
   10 datadeclaration: typespecifier IDENTIFIER . ';'
   11                | typespecifier IDENTIFIER . '=' datavalue

    '='  shift, and go to state 75
    '('  shift, and go to state 76
    ';'  shift, and go to state 77


State 53

   57 expr: expr OR . expr

    NUMBER      shift, and go to state 1
    IDENTIFIER  shift, and go to state 2
    '-'         shift, and go to state 13
    PLUS        shift, and go to state 14
    NOT         shift, and go to state 15
    '('         shift, and go to state 16

    expr  go to state 78


State 54

   56 expr: expr AND . expr

    NUMBER      shift, and go to state 1
    IDENTIFIER  shift, and go to state 2
    '-'         shift, and go to state 13
    PLUS        shift, and go to state 14
    NOT         shift, and go to state 15
    '('         shift, and go to state 16

    expr  go to state 79


State 55

   50 expr: expr '<' . expr

    NUMBER      shift, and go to state 1
    IDENTIFIER  shift, and go to state 2
    '-'         shift, and go to state 13
    PLUS        shift, and go to state 14
    NOT         shift, and go to state 15
    '('         shift, and go to state 16

    expr  go to state 80


State 56

   51 expr: expr '>' . expr

    NUMBER      shift, and go to state 1
    IDENTIFIER  shift, and go to state 2
    '-'         shift, and go to state 13
    PLUS        shift, and go to state 14
    NOT         shift, and go to state 15
    '('         shift, and go to state 16

    expr  go to state 81


State 57

   54 expr: expr EQ . expr

    NUMBER      shift, and go to state 1
    IDENTIFIER  shift, and go to state 2
    '-'         shift, and go to state 13
    PLUS        shift, and go to state 14
    NOT         shift, and go to state 15
    '('         shift, and go to state 16

    expr  go to state 82


State 58

   55 expr: expr NE . expr

    NUMBER      shift, and go to state 1
    IDENTIFIER  shift, and go to state 2
    '-'         shift, and go to state 13
    PLUS        shift, and go to state 14
    NOT         shift, and go to state 15
    '('         shift, and go to state 16

    expr  go to state 83


State 59

   53 expr: expr GE . expr

    NUMBER      shift, and go to state 1
    IDENTIFIER  shift, and go to state 2
    '-'         shift, and go to state 13
    PLUS        shift, and go to state 14
    NOT         shift, and go to state 15
    '('         shift, and go to state 16

    expr  go to state 84


State 60

   52 expr: expr LE . expr

    NUMBER      shift, and go to state 1
    IDENTIFIER  shift, and go to state 2
    '-'         shift, and go to state 13
    PLUS        shift, and go to state 14
    NOT         shift, and go to state 15
    '('         shift, and go to state 16

    expr  go to state 85


State 61

   47 expr: expr '-' . expr

    NUMBER      shift, and go to state 1
    IDENTIFIER  shift, and go to state 2
    '-'         shift, and go to state 13
    PLUS        shift, and go to state 14
    NOT         shift, and go to state 15
    '('         shift, and go to state 16

    expr  go to state 86


State 62

   46 expr: expr PLUS . expr

    NUMBER      shift, and go to state 1
    IDENTIFIER  shift, and go to state 2
    '-'         shift, and go to state 13
    PLUS        shift, and go to state 14
    NOT         shift, and go to state 15
    '('         shift, and go to state 16

    expr  go to state 87


State 63

   48 expr: expr '*' . expr

    NUMBER      shift, and go to state 1
    IDENTIFIER  shift, and go to state 2
    '-'         shift, and go to state 13
    PLUS        shift, and go to state 14
    NOT         shift, and go to state 15
    '('         shift, and go to state 16

    expr  go to state 88


State 64

   49 expr: expr '/' . expr

    NUMBER      shift, and go to state 1
    IDENTIFIER  shift, and go to state 2
    '-'         shift, and go to state 13
    PLUS        shift, and go to state 14
    NOT         shift, and go to state 15
    '('         shift, and go to state 16

    expr  go to state 89


State 65

   33 exprstatement: expr ';' .

    $default  reduce using rule 33 (exprstatement)


State 66

   45 expr: IDENTIFIER '=' expr .
   46     | expr . PLUS expr
   47     | expr . '-' expr
   48     | expr . '*' expr
   49     | expr . '/' expr
   50     | expr . '<' expr
   51     | expr . '>' expr
   52     | expr . LE expr
   53     | expr . GE expr
   54     | expr . EQ expr
   55     | expr . NE expr
   56     | expr . AND expr
   57     | expr . OR expr

    OR    shift, and go to state 53
    AND   shift, and go to state 54
    '<'   shift, and go to state 55
    '>'   shift, and go to state 56
    EQ    shift, and go to state 57
    NE    shift, and go to state 58
    GE    shift, and go to state 59
    LE    shift, and go to state 60
    '-'   shift, and go to state 61
    PLUS  shift, and go to state 62
    '*'   shift, and go to state 63
    '/'   shift, and go to state 64

    $default  reduce using rule 45 (expr)


State 67

   40 ifstatement: IF '(' expr . ')' statement
   41            | IF '(' expr . ')' statement ELSE statement
   46 expr: expr . PLUS expr
   47     | expr . '-' expr
   48     | expr . '*' expr
   49     | expr . '/' expr
   50     | expr . '<' expr
   51     | expr . '>' expr
   52     | expr . LE expr
   53     | expr . GE expr
   54     | expr . EQ expr
   55     | expr . NE expr
   56     | expr . AND expr
   57     | expr . OR expr

    OR    shift, and go to state 53
    AND   shift, and go to state 54
    '<'   shift, and go to state 55
    '>'   shift, and go to state 56
    EQ    shift, and go to state 57
    NE    shift, and go to state 58
    GE    shift, and go to state 59
    LE    shift, and go to state 60
    '-'   shift, and go to state 61
    PLUS  shift, and go to state 62
    '*'   shift, and go to state 63
    '/'   shift, and go to state 64
    ')'   shift, and go to state 90


State 68

   35 whilestatement: WHILE '(' expr . ')' statement
   46 expr: expr . PLUS expr
   47     | expr . '-' expr
   48     | expr . '*' expr
   49     | expr . '/' expr
   50     | expr . '<' expr
   51     | expr . '>' expr
   52     | expr . LE expr
   53     | expr . GE expr
   54     | expr . EQ expr
   55     | expr . NE expr
   56     | expr . AND expr
   57     | expr . OR expr

    OR    shift, and go to state 53
    AND   shift, and go to state 54
    '<'   shift, and go to state 55
    '>'   shift, and go to state 56
    EQ    shift, and go to state 57
    NE    shift, and go to state 58
    GE    shift, and go to state 59
    LE    shift, and go to state 60
    '-'   shift, and go to state 61
    PLUS  shift, and go to state 62
    '*'   shift, and go to state 63
    '/'   shift, and go to state 64
    ')'   shift, and go to state 91


State 69

   38 forprimitive: exprstatement .

    $default  reduce using rule 38 (forprimitive)


State 70

   39 forprimitive: emptystatement .

    $default  reduce using rule 39 (forprimitive)


State 71

   36 forstatement: FOR '(' forprimitive . forprimitive ')' statement
   37             | FOR '(' forprimitive . forprimitive expr ')' statement

    NUMBER      shift, and go to state 1
    IDENTIFIER  shift, and go to state 2
    '-'         shift, and go to state 13
    PLUS        shift, and go to state 14
    NOT         shift, and go to state 15
    '('         shift, and go to state 16
    ';'         shift, and go to state 17

    exprstatement   go to state 69
    emptystatement  go to state 70
    forprimitive    go to state 92
    expr            go to state 34


State 72

   30 returnstatement: RETURN expr ';' .

    $default  reduce using rule 30 (returnstatement)


State 73

   44 expr: '(' expr ')' .

    $default  reduce using rule 44 (expr)


State 74

   27 compoundstatement: '{' statement '}' .

    $default  reduce using rule 27 (compoundstatement)


State 75

   11 datadeclaration: typespecifier IDENTIFIER '=' . datavalue

    NUMBER  shift, and go to state 93
    STRING  shift, and go to state 94

    datavalue  go to state 95


State 76

    7 functiondeclaration: typespecifier IDENTIFIER '(' . datadeclarations ')' statement

    INT     shift, and go to state 9
    DOUBLE  shift, and go to state 10
    VOID    shift, and go to state 11
    STRING  shift, and go to state 12

    datadeclarations  go to state 96
    datadeclaration   go to state 97
    typespecifier     go to state 98


State 77

   10 datadeclaration: typespecifier IDENTIFIER ';' .

    $default  reduce using rule 10 (datadeclaration)


State 78

   46 expr: expr . PLUS expr
   47     | expr . '-' expr
   48     | expr . '*' expr
   49     | expr . '/' expr
   50     | expr . '<' expr
   51     | expr . '>' expr
   52     | expr . LE expr
   53     | expr . GE expr
   54     | expr . EQ expr
   55     | expr . NE expr
   56     | expr . AND expr
   57     | expr . OR expr
   57     | expr OR expr .

    AND   shift, and go to state 54
    '<'   shift, and go to state 55
    '>'   shift, and go to state 56
    EQ    shift, and go to state 57
    NE    shift, and go to state 58
    GE    shift, and go to state 59
    LE    shift, and go to state 60
    '-'   shift, and go to state 61
    PLUS  shift, and go to state 62
    '*'   shift, and go to state 63
    '/'   shift, and go to state 64

    $default  reduce using rule 57 (expr)


State 79

   46 expr: expr . PLUS expr
   47     | expr . '-' expr
   48     | expr . '*' expr
   49     | expr . '/' expr
   50     | expr . '<' expr
   51     | expr . '>' expr
   52     | expr . LE expr
   53     | expr . GE expr
   54     | expr . EQ expr
   55     | expr . NE expr
   56     | expr . AND expr
   56     | expr AND expr .
   57     | expr . OR expr

    '<'   shift, and go to state 55
    '>'   shift, and go to state 56
    EQ    shift, and go to state 57
    NE    shift, and go to state 58
    GE    shift, and go to state 59
    LE    shift, and go to state 60
    '-'   shift, and go to state 61
    PLUS  shift, and go to state 62
    '*'   shift, and go to state 63
    '/'   shift, and go to state 64

    $default  reduce using rule 56 (expr)


State 80

   46 expr: expr . PLUS expr
   47     | expr . '-' expr
   48     | expr . '*' expr
   49     | expr . '/' expr
   50     | expr . '<' expr
   50     | expr '<' expr .
   51     | expr . '>' expr
   52     | expr . LE expr
   53     | expr . GE expr
   54     | expr . EQ expr
   55     | expr . NE expr
   56     | expr . AND expr
   57     | expr . OR expr

    '-'   shift, and go to state 61
    PLUS  shift, and go to state 62
    '*'   shift, and go to state 63
    '/'   shift, and go to state 64

    '<'  error (nonassociative)
    '>'  error (nonassociative)
    EQ   error (nonassociative)
    NE   error (nonassociative)
    GE   error (nonassociative)
    LE   error (nonassociative)

    $default  reduce using rule 50 (expr)


State 81

   46 expr: expr . PLUS expr
   47     | expr . '-' expr
   48     | expr . '*' expr
   49     | expr . '/' expr
   50     | expr . '<' expr
   51     | expr . '>' expr
   51     | expr '>' expr .
   52     | expr . LE expr
   53     | expr . GE expr
   54     | expr . EQ expr
   55     | expr . NE expr
   56     | expr . AND expr
   57     | expr . OR expr

    '-'   shift, and go to state 61
    PLUS  shift, and go to state 62
    '*'   shift, and go to state 63
    '/'   shift, and go to state 64

    '<'  error (nonassociative)
    '>'  error (nonassociative)
    EQ   error (nonassociative)
    NE   error (nonassociative)
    GE   error (nonassociative)
    LE   error (nonassociative)

    $default  reduce using rule 51 (expr)


State 82

   46 expr: expr . PLUS expr
   47     | expr . '-' expr
   48     | expr . '*' expr
   49     | expr . '/' expr
   50     | expr . '<' expr
   51     | expr . '>' expr
   52     | expr . LE expr
   53     | expr . GE expr
   54     | expr . EQ expr
   54     | expr EQ expr .
   55     | expr . NE expr
   56     | expr . AND expr
   57     | expr . OR expr

    '-'   shift, and go to state 61
    PLUS  shift, and go to state 62
    '*'   shift, and go to state 63
    '/'   shift, and go to state 64

    '<'  error (nonassociative)
    '>'  error (nonassociative)
    EQ   error (nonassociative)
    NE   error (nonassociative)
    GE   error (nonassociative)
    LE   error (nonassociative)

    $default  reduce using rule 54 (expr)


State 83

   46 expr: expr . PLUS expr
   47     | expr . '-' expr
   48     | expr . '*' expr
   49     | expr . '/' expr
   50     | expr . '<' expr
   51     | expr . '>' expr
   52     | expr . LE expr
   53     | expr . GE expr
   54     | expr . EQ expr
   55     | expr . NE expr
   55     | expr NE expr .
   56     | expr . AND expr
   57     | expr . OR expr

    '-'   shift, and go to state 61
    PLUS  shift, and go to state 62
    '*'   shift, and go to state 63
    '/'   shift, and go to state 64

    '<'  error (nonassociative)
    '>'  error (nonassociative)
    EQ   error (nonassociative)
    NE   error (nonassociative)
    GE   error (nonassociative)
    LE   error (nonassociative)

    $default  reduce using rule 55 (expr)


State 84

   46 expr: expr . PLUS expr
   47     | expr . '-' expr
   48     | expr . '*' expr
   49     | expr . '/' expr
   50     | expr . '<' expr
   51     | expr . '>' expr
   52     | expr . LE expr
   53     | expr . GE expr
   53     | expr GE expr .
   54     | expr . EQ expr
   55     | expr . NE expr
   56     | expr . AND expr
   57     | expr . OR expr

    '-'   shift, and go to state 61
    PLUS  shift, and go to state 62
    '*'   shift, and go to state 63
    '/'   shift, and go to state 64

    '<'  error (nonassociative)
    '>'  error (nonassociative)
    EQ   error (nonassociative)
    NE   error (nonassociative)
    GE   error (nonassociative)
    LE   error (nonassociative)

    $default  reduce using rule 53 (expr)


State 85

   46 expr: expr . PLUS expr
   47     | expr . '-' expr
   48     | expr . '*' expr
   49     | expr . '/' expr
   50     | expr . '<' expr
   51     | expr . '>' expr
   52     | expr . LE expr
   52     | expr LE expr .
   53     | expr . GE expr
   54     | expr . EQ expr
   55     | expr . NE expr
   56     | expr . AND expr
   57     | expr . OR expr

    '-'   shift, and go to state 61
    PLUS  shift, and go to state 62
    '*'   shift, and go to state 63
    '/'   shift, and go to state 64

    '<'  error (nonassociative)
    '>'  error (nonassociative)
    EQ   error (nonassociative)
    NE   error (nonassociative)
    GE   error (nonassociative)
    LE   error (nonassociative)

    $default  reduce using rule 52 (expr)


State 86

   46 expr: expr . PLUS expr
   47     | expr . '-' expr
   47     | expr '-' expr .
   48     | expr . '*' expr
   49     | expr . '/' expr
   50     | expr . '<' expr
   51     | expr . '>' expr
   52     | expr . LE expr
   53     | expr . GE expr
   54     | expr . EQ expr
   55     | expr . NE expr
   56     | expr . AND expr
   57     | expr . OR expr

    '*'  shift, and go to state 63
    '/'  shift, and go to state 64

    $default  reduce using rule 47 (expr)


State 87

   46 expr: expr . PLUS expr
   46     | expr PLUS expr .
   47     | expr . '-' expr
   48     | expr . '*' expr
   49     | expr . '/' expr
   50     | expr . '<' expr
   51     | expr . '>' expr
   52     | expr . LE expr
   53     | expr . GE expr
   54     | expr . EQ expr
   55     | expr . NE expr
   56     | expr . AND expr
   57     | expr . OR expr

    '*'  shift, and go to state 63
    '/'  shift, and go to state 64

    $default  reduce using rule 46 (expr)


State 88

   46 expr: expr . PLUS expr
   47     | expr . '-' expr
   48     | expr . '*' expr
   48     | expr '*' expr .
   49     | expr . '/' expr
   50     | expr . '<' expr
   51     | expr . '>' expr
   52     | expr . LE expr
   53     | expr . GE expr
   54     | expr . EQ expr
   55     | expr . NE expr
   56     | expr . AND expr
   57     | expr . OR expr

    $default  reduce using rule 48 (expr)


State 89

   46 expr: expr . PLUS expr
   47     | expr . '-' expr
   48     | expr . '*' expr
   49     | expr . '/' expr
   49     | expr '/' expr .
   50     | expr . '<' expr
   51     | expr . '>' expr
   52     | expr . LE expr
   53     | expr . GE expr
   54     | expr . EQ expr
   55     | expr . NE expr
   56     | expr . AND expr
   57     | expr . OR expr

    $default  reduce using rule 49 (expr)


State 90

   40 ifstatement: IF '(' expr ')' . statement
   41            | IF '(' expr ')' . statement ELSE statement

    NUMBER      shift, and go to state 1
    IDENTIFIER  shift, and go to state 2
    IF          shift, and go to state 3
    WHILE       shift, and go to state 4
    FOR         shift, and go to state 5
    BREAK       shift, and go to state 6
    CONTINUE    shift, and go to state 7
    RETURN      shift, and go to state 8
    '-'         shift, and go to state 13
    PLUS        shift, and go to state 14
    NOT         shift, and go to state 15
    '('         shift, and go to state 16
    ';'         shift, and go to state 17
    '{'         shift, and go to state 18

    statement          go to state 99
    compoundstatement  go to state 25
    breakstatement     go to state 26
    returnstatement    go to state 27
    continuestatement  go to state 28
    exprstatement      go to state 29
    emptystatement     go to state 30
    whilestatement     go to state 31
    forstatement       go to state 32
    ifstatement        go to state 33
    expr               go to state 34


State 91

   35 whilestatement: WHILE '(' expr ')' . statement

    NUMBER      shift, and go to state 1
    IDENTIFIER  shift, and go to state 2
    IF          shift, and go to state 3
    WHILE       shift, and go to state 4
    FOR         shift, and go to state 5
    BREAK       shift, and go to state 6
    CONTINUE    shift, and go to state 7
    RETURN      shift, and go to state 8
    '-'         shift, and go to state 13
    PLUS        shift, and go to state 14
    NOT         shift, and go to state 15
    '('         shift, and go to state 16
    ';'         shift, and go to state 17
    '{'         shift, and go to state 18

    statement          go to state 100
    compoundstatement  go to state 25
    breakstatement     go to state 26
    returnstatement    go to state 27
    continuestatement  go to state 28
    exprstatement      go to state 29
    emptystatement     go to state 30
    whilestatement     go to state 31
    forstatement       go to state 32
    ifstatement        go to state 33
    expr               go to state 34


State 92

   36 forstatement: FOR '(' forprimitive forprimitive . ')' statement
   37             | FOR '(' forprimitive forprimitive . expr ')' statement

    NUMBER      shift, and go to state 1
    IDENTIFIER  shift, and go to state 2
    '-'         shift, and go to state 13
    PLUS        shift, and go to state 14
    NOT         shift, and go to state 15
    '('         shift, and go to state 16
    ')'         shift, and go to state 101

    expr  go to state 102


State 93

   16 datavalue: NUMBER .

    $default  reduce using rule 16 (datavalue)


State 94

   17 datavalue: STRING .

    $default  reduce using rule 17 (datavalue)


State 95

   11 datadeclaration: typespecifier IDENTIFIER '=' datavalue .

    $default  reduce using rule 11 (datadeclaration)


State 96

    7 functiondeclaration: typespecifier IDENTIFIER '(' datadeclarations . ')' statement
    9 datadeclarations: datadeclarations . ',' datadeclaration

    ')'  shift, and go to state 103
    ','  shift, and go to state 104


State 97

    8 datadeclarations: datadeclaration .

    $default  reduce using rule 8 (datadeclarations)


State 98

   10 datadeclaration: typespecifier . IDENTIFIER ';'
   11                | typespecifier . IDENTIFIER '=' datavalue

    IDENTIFIER  shift, and go to state 105


State 99

   40 ifstatement: IF '(' expr ')' statement .
   41            | IF '(' expr ')' statement . ELSE statement

    ELSE  shift, and go to state 106

    $default  reduce using rule 40 (ifstatement)


State 100

   35 whilestatement: WHILE '(' expr ')' statement .

    $default  reduce using rule 35 (whilestatement)


State 101

   36 forstatement: FOR '(' forprimitive forprimitive ')' . statement

    NUMBER      shift, and go to state 1
    IDENTIFIER  shift, and go to state 2
    IF          shift, and go to state 3
    WHILE       shift, and go to state 4
    FOR         shift, and go to state 5
    BREAK       shift, and go to state 6
    CONTINUE    shift, and go to state 7
    RETURN      shift, and go to state 8
    '-'         shift, and go to state 13
    PLUS        shift, and go to state 14
    NOT         shift, and go to state 15
    '('         shift, and go to state 16
    ';'         shift, and go to state 17
    '{'         shift, and go to state 18

    statement          go to state 107
    compoundstatement  go to state 25
    breakstatement     go to state 26
    returnstatement    go to state 27
    continuestatement  go to state 28
    exprstatement      go to state 29
    emptystatement     go to state 30
    whilestatement     go to state 31
    forstatement       go to state 32
    ifstatement        go to state 33
    expr               go to state 34


State 102

   37 forstatement: FOR '(' forprimitive forprimitive expr . ')' statement
   46 expr: expr . PLUS expr
   47     | expr . '-' expr
   48     | expr . '*' expr
   49     | expr . '/' expr
   50     | expr . '<' expr
   51     | expr . '>' expr
   52     | expr . LE expr
   53     | expr . GE expr
   54     | expr . EQ expr
   55     | expr . NE expr
   56     | expr . AND expr
   57     | expr . OR expr

    OR    shift, and go to state 53
    AND   shift, and go to state 54
    '<'   shift, and go to state 55
    '>'   shift, and go to state 56
    EQ    shift, and go to state 57
    NE    shift, and go to state 58
    GE    shift, and go to state 59
    LE    shift, and go to state 60
    '-'   shift, and go to state 61
    PLUS  shift, and go to state 62
    '*'   shift, and go to state 63
    '/'   shift, and go to state 64
    ')'   shift, and go to state 108


State 103

    7 functiondeclaration: typespecifier IDENTIFIER '(' datadeclarations ')' . statement

    NUMBER      shift, and go to state 1
    IDENTIFIER  shift, and go to state 2
    IF          shift, and go to state 3
    WHILE       shift, and go to state 4
    FOR         shift, and go to state 5
    BREAK       shift, and go to state 6
    CONTINUE    shift, and go to state 7
    RETURN      shift, and go to state 8
    '-'         shift, and go to state 13
    PLUS        shift, and go to state 14
    NOT         shift, and go to state 15
    '('         shift, and go to state 16
    ';'         shift, and go to state 17
    '{'         shift, and go to state 18

    statement          go to state 109
    compoundstatement  go to state 25
    breakstatement     go to state 26
    returnstatement    go to state 27
    continuestatement  go to state 28
    exprstatement      go to state 29
    emptystatement     go to state 30
    whilestatement     go to state 31
    forstatement       go to state 32
    ifstatement        go to state 33
    expr               go to state 34


State 104

    9 datadeclarations: datadeclarations ',' . datadeclaration

    INT     shift, and go to state 9
    DOUBLE  shift, and go to state 10
    VOID    shift, and go to state 11
    STRING  shift, and go to state 12

    datadeclaration  go to state 110
    typespecifier    go to state 98


State 105

   10 datadeclaration: typespecifier IDENTIFIER . ';'
   11                | typespecifier IDENTIFIER . '=' datavalue

    '='  shift, and go to state 75
    ';'  shift, and go to state 77


State 106

   41 ifstatement: IF '(' expr ')' statement ELSE . statement

    NUMBER      shift, and go to state 1
    IDENTIFIER  shift, and go to state 2
    IF          shift, and go to state 3
    WHILE       shift, and go to state 4
    FOR         shift, and go to state 5
    BREAK       shift, and go to state 6
    CONTINUE    shift, and go to state 7
    RETURN      shift, and go to state 8
    '-'         shift, and go to state 13
    PLUS        shift, and go to state 14
    NOT         shift, and go to state 15
    '('         shift, and go to state 16
    ';'         shift, and go to state 17
    '{'         shift, and go to state 18

    statement          go to state 111
    compoundstatement  go to state 25
    breakstatement     go to state 26
    returnstatement    go to state 27
    continuestatement  go to state 28
    exprstatement      go to state 29
    emptystatement     go to state 30
    whilestatement     go to state 31
    forstatement       go to state 32
    ifstatement        go to state 33
    expr               go to state 34


State 107

   36 forstatement: FOR '(' forprimitive forprimitive ')' statement .

    $default  reduce using rule 36 (forstatement)


State 108

   37 forstatement: FOR '(' forprimitive forprimitive expr ')' . statement

    NUMBER      shift, and go to state 1
    IDENTIFIER  shift, and go to state 2
    IF          shift, and go to state 3
    WHILE       shift, and go to state 4
    FOR         shift, and go to state 5
    BREAK       shift, and go to state 6
    CONTINUE    shift, and go to state 7
    RETURN      shift, and go to state 8
    '-'         shift, and go to state 13
    PLUS        shift, and go to state 14
    NOT         shift, and go to state 15
    '('         shift, and go to state 16
    ';'         shift, and go to state 17
    '{'         shift, and go to state 18

    statement          go to state 112
    compoundstatement  go to state 25
    breakstatement     go to state 26
    returnstatement    go to state 27
    continuestatement  go to state 28
    exprstatement      go to state 29
    emptystatement     go to state 30
    whilestatement     go to state 31
    forstatement       go to state 32
    ifstatement        go to state 33
    expr               go to state 34


State 109

    7 functiondeclaration: typespecifier IDENTIFIER '(' datadeclarations ')' statement .

    $default  reduce using rule 7 (functiondeclaration)


State 110

    9 datadeclarations: datadeclarations ',' datadeclaration .

    $default  reduce using rule 9 (datadeclarations)


State 111

   41 ifstatement: IF '(' expr ')' statement ELSE statement .

    $default  reduce using rule 41 (ifstatement)


State 112

   37 forstatement: FOR '(' forprimitive forprimitive expr ')' statement .

    $default  reduce using rule 37 (forstatement)
