Grammar

    0 $accept: compileunit $end

    1 compileunit: declaration
    2            | statement
    3            | compileunit declaration
    4            | compileunit statement

    5 declaration: datadeclaration
    6            | functiondeclaration

    7 functiondeclaration: typespecifier IDENTIFIER '(' datadeclarations ')' statement

    8 datadeclarations: datadeclaration
    9                 | datadeclarations ',' datadeclaration

   10 datadeclaration: typespecifier IDENTIFIER ';'
   11                | typespecifier IDENTIFIER '=' datavalue

   12 typespecifier: INT_TYPE
   13              | DOUBLE_TYPE
   14              | STRING_TYPE
   15              | VOID_TYPE

   16 datavalue: NUMBER
   17          | STRING

   18 statement: exprstatement
   19          | emptystatement
   20          | whilestatement
   21          | ifstatement
   22          | forstatement
   23          | breakstatement
   24          | returnstatement
   25          | continuestatement
   26          | compoundstatement

   27 compoundstatement: '{' statementlist '}'
   28                  | '{' '}'

   29 statementlist: statement
   30              | statementlist statement

   31 breakstatement: BREAK ';'

   32 returnstatement: RETURN expr ';'
   33                | RETURN ';'

   34 continuestatement: CONTINUE ';'

   35 exprstatement: expr ';'

   36 emptystatement: ';'

   37 whilestatement: WHILE '(' expr ')' statement

   38 forstatement: FOR '(' forprimitive forprimitive ')' statement
   39             | FOR '(' forprimitive forprimitive expr ')' statement

   40 forprimitive: exprstatement
   41             | emptystatement

   42 ifstatement: IF '(' expr ')' statement
   43            | IF '(' expr ')' statement ELSE statement

   44 expr: NUMBER
   45     | IDENTIFIER
   46     | '(' expr ')'
   47     | IDENTIFIER '=' expr
   48     | expr PLUS expr
   49     | expr '-' expr
   50     | expr '*' expr
   51     | expr '/' expr
   52     | expr '<' expr
   53     | expr '>' expr
   54     | expr LE expr
   55     | expr GE expr
   56     | expr EQ expr
   57     | expr NE expr
   58     | expr AND expr
   59     | expr OR expr
   60     | NOT expr
   61     | PLUS expr
   62     | '-' expr


Terminals, with rules where they appear

$end (0) 0
'(' (40) 7 37 38 39 42 43 46
')' (41) 7 37 38 39 42 43 46
'*' (42) 50
',' (44) 9
'-' (45) 49 62
'/' (47) 51
';' (59) 10 31 32 33 34 35 36
'<' (60) 52
'=' (61) 11 47
'>' (62) 53
'{' (123) 27 28
'}' (125) 27 28
error (256)
IDENTIFIER (258) 7 10 11 45 47
IF (259) 42 43
WHILE (260) 37
FOR (261) 38 39
BREAK (262) 31
CONTINUE (263) 34
RETURN (264) 32 33
INT_TYPE (265) 12
DOUBLE_TYPE (266) 13
VOID_TYPE (267) 15
STRING_TYPE (268) 14
STRING (269) 17
NUMBER (270) 16 44
IFRULE (271)
OR (272) 59
AND (273) 58
EQ (274) 56
NE (275) 57
GE (276) 55
LE (277) 54
PLUS (278) 48 61
ELSE (279) 43
UNARYOP (280)
NOT (281) 60


Nonterminals, with rules where they appear

$accept (39)
    on left: 0
compileunit (40)
    on left: 1 2 3 4, on right: 0 3 4
declaration (41)
    on left: 5 6, on right: 1 3
functiondeclaration (42)
    on left: 7, on right: 6
datadeclarations (43)
    on left: 8 9, on right: 7 9
datadeclaration (44)
    on left: 10 11, on right: 5 8 9
typespecifier (45)
    on left: 12 13 14 15, on right: 7 10 11
datavalue (46)
    on left: 16 17, on right: 11
statement (47)
    on left: 18 19 20 21 22 23 24 25 26, on right: 2 4 7 29 30 37 38
    39 42 43
compoundstatement (48)
    on left: 27 28, on right: 26
statementlist (49)
    on left: 29 30, on right: 27 30
breakstatement (50)
    on left: 31, on right: 23
returnstatement (51)
    on left: 32 33, on right: 24
continuestatement (52)
    on left: 34, on right: 25
exprstatement (53)
    on left: 35, on right: 18 40
emptystatement (54)
    on left: 36, on right: 19 41
whilestatement (55)
    on left: 37, on right: 20
forstatement (56)
    on left: 38 39, on right: 22
forprimitive (57)
    on left: 40 41, on right: 38 39
ifstatement (58)
    on left: 42 43, on right: 21
expr (59)
    on left: 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61
    62, on right: 32 35 37 39 42 43 46 47 48 49 50 51 52 53 54 55 56
    57 58 59 60 61 62


State 0

    0 $accept: . compileunit $end

    IDENTIFIER   shift, and go to state 1
    IF           shift, and go to state 2
    WHILE        shift, and go to state 3
    FOR          shift, and go to state 4
    BREAK        shift, and go to state 5
    CONTINUE     shift, and go to state 6
    RETURN       shift, and go to state 7
    INT_TYPE     shift, and go to state 8
    DOUBLE_TYPE  shift, and go to state 9
    VOID_TYPE    shift, and go to state 10
    STRING_TYPE  shift, and go to state 11
    NUMBER       shift, and go to state 12
    '-'          shift, and go to state 13
    PLUS         shift, and go to state 14
    NOT          shift, and go to state 15
    '('          shift, and go to state 16
    ';'          shift, and go to state 17
    '{'          shift, and go to state 18

    compileunit          go to state 19
    declaration          go to state 20
    functiondeclaration  go to state 21
    datadeclaration      go to state 22
    typespecifier        go to state 23
    statement            go to state 24
    compoundstatement    go to state 25
    breakstatement       go to state 26
    returnstatement      go to state 27
    continuestatement    go to state 28
    exprstatement        go to state 29
    emptystatement       go to state 30
    whilestatement       go to state 31
    forstatement         go to state 32
    ifstatement          go to state 33
    expr                 go to state 34


State 1

   45 expr: IDENTIFIER .
   47     | IDENTIFIER . '=' expr

    '='  shift, and go to state 35

    $default  reduce using rule 45 (expr)


State 2

   42 ifstatement: IF . '(' expr ')' statement
   43            | IF . '(' expr ')' statement ELSE statement

    '('  shift, and go to state 36


State 3

   37 whilestatement: WHILE . '(' expr ')' statement

    '('  shift, and go to state 37


State 4

   38 forstatement: FOR . '(' forprimitive forprimitive ')' statement
   39             | FOR . '(' forprimitive forprimitive expr ')' statement

    '('  shift, and go to state 38


State 5

   31 breakstatement: BREAK . ';'

    ';'  shift, and go to state 39


State 6

   34 continuestatement: CONTINUE . ';'

    ';'  shift, and go to state 40


State 7

   32 returnstatement: RETURN . expr ';'
   33                | RETURN . ';'

    IDENTIFIER  shift, and go to state 1
    NUMBER      shift, and go to state 12
    '-'         shift, and go to state 13
    PLUS        shift, and go to state 14
    NOT         shift, and go to state 15
    '('         shift, and go to state 16
    ';'         shift, and go to state 41

    expr  go to state 42


State 8

   12 typespecifier: INT_TYPE .

    $default  reduce using rule 12 (typespecifier)


State 9

   13 typespecifier: DOUBLE_TYPE .

    $default  reduce using rule 13 (typespecifier)


State 10

   15 typespecifier: VOID_TYPE .

    $default  reduce using rule 15 (typespecifier)


State 11

   14 typespecifier: STRING_TYPE .

    $default  reduce using rule 14 (typespecifier)


State 12

   44 expr: NUMBER .

    $default  reduce using rule 44 (expr)


State 13

   62 expr: '-' . expr

    IDENTIFIER  shift, and go to state 1
    NUMBER      shift, and go to state 12
    '-'         shift, and go to state 13
    PLUS        shift, and go to state 14
    NOT         shift, and go to state 15
    '('         shift, and go to state 16

    expr  go to state 43


State 14

   61 expr: PLUS . expr

    IDENTIFIER  shift, and go to state 1
    NUMBER      shift, and go to state 12
    '-'         shift, and go to state 13
    PLUS        shift, and go to state 14
    NOT         shift, and go to state 15
    '('         shift, and go to state 16

    expr  go to state 44


State 15

   60 expr: NOT . expr

    IDENTIFIER  shift, and go to state 1
    NUMBER      shift, and go to state 12
    '-'         shift, and go to state 13
    PLUS        shift, and go to state 14
    NOT         shift, and go to state 15
    '('         shift, and go to state 16

    expr  go to state 45


State 16

   46 expr: '(' . expr ')'

    IDENTIFIER  shift, and go to state 1
    NUMBER      shift, and go to state 12
    '-'         shift, and go to state 13
    PLUS        shift, and go to state 14
    NOT         shift, and go to state 15
    '('         shift, and go to state 16

    expr  go to state 46


State 17

   36 emptystatement: ';' .

    $default  reduce using rule 36 (emptystatement)


State 18

   27 compoundstatement: '{' . statementlist '}'
   28                  | '{' . '}'

    IDENTIFIER  shift, and go to state 1
    IF          shift, and go to state 2
    WHILE       shift, and go to state 3
    FOR         shift, and go to state 4
    BREAK       shift, and go to state 5
    CONTINUE    shift, and go to state 6
    RETURN      shift, and go to state 7
    NUMBER      shift, and go to state 12
    '-'         shift, and go to state 13
    PLUS        shift, and go to state 14
    NOT         shift, and go to state 15
    '('         shift, and go to state 16
    ';'         shift, and go to state 17
    '{'         shift, and go to state 18
    '}'         shift, and go to state 47

    statement          go to state 48
    compoundstatement  go to state 25
    statementlist      go to state 49
    breakstatement     go to state 26
    returnstatement    go to state 27
    continuestatement  go to state 28
    exprstatement      go to state 29
    emptystatement     go to state 30
    whilestatement     go to state 31
    forstatement       go to state 32
    ifstatement        go to state 33
    expr               go to state 34


State 19

    0 $accept: compileunit . $end
    3 compileunit: compileunit . declaration
    4            | compileunit . statement

    $end         shift, and go to state 50
    IDENTIFIER   shift, and go to state 1
    IF           shift, and go to state 2
    WHILE        shift, and go to state 3
    FOR          shift, and go to state 4
    BREAK        shift, and go to state 5
    CONTINUE     shift, and go to state 6
    RETURN       shift, and go to state 7
    INT_TYPE     shift, and go to state 8
    DOUBLE_TYPE  shift, and go to state 9
    VOID_TYPE    shift, and go to state 10
    STRING_TYPE  shift, and go to state 11
    NUMBER       shift, and go to state 12
    '-'          shift, and go to state 13
    PLUS         shift, and go to state 14
    NOT          shift, and go to state 15
    '('          shift, and go to state 16
    ';'          shift, and go to state 17
    '{'          shift, and go to state 18

    declaration          go to state 51
    functiondeclaration  go to state 21
    datadeclaration      go to state 22
    typespecifier        go to state 23
    statement            go to state 52
    compoundstatement    go to state 25
    breakstatement       go to state 26
    returnstatement      go to state 27
    continuestatement    go to state 28
    exprstatement        go to state 29
    emptystatement       go to state 30
    whilestatement       go to state 31
    forstatement         go to state 32
    ifstatement          go to state 33
    expr                 go to state 34


State 20

    1 compileunit: declaration .

    $default  reduce using rule 1 (compileunit)


State 21

    6 declaration: functiondeclaration .

    $default  reduce using rule 6 (declaration)


State 22

    5 declaration: datadeclaration .

    $default  reduce using rule 5 (declaration)


State 23

    7 functiondeclaration: typespecifier . IDENTIFIER '(' datadeclarations ')' statement
   10 datadeclaration: typespecifier . IDENTIFIER ';'
   11                | typespecifier . IDENTIFIER '=' datavalue

    IDENTIFIER  shift, and go to state 53


State 24

    2 compileunit: statement .

    $default  reduce using rule 2 (compileunit)


State 25

   26 statement: compoundstatement .

    $default  reduce using rule 26 (statement)


State 26

   23 statement: breakstatement .

    $default  reduce using rule 23 (statement)


State 27

   24 statement: returnstatement .

    $default  reduce using rule 24 (statement)


State 28

   25 statement: continuestatement .

    $default  reduce using rule 25 (statement)


State 29

   18 statement: exprstatement .

    $default  reduce using rule 18 (statement)


State 30

   19 statement: emptystatement .

    $default  reduce using rule 19 (statement)


State 31

   20 statement: whilestatement .

    $default  reduce using rule 20 (statement)


State 32

   22 statement: forstatement .

    $default  reduce using rule 22 (statement)


State 33

   21 statement: ifstatement .

    $default  reduce using rule 21 (statement)


State 34

   35 exprstatement: expr . ';'
   48 expr: expr . PLUS expr
   49     | expr . '-' expr
   50     | expr . '*' expr
   51     | expr . '/' expr
   52     | expr . '<' expr
   53     | expr . '>' expr
   54     | expr . LE expr
   55     | expr . GE expr
   56     | expr . EQ expr
   57     | expr . NE expr
   58     | expr . AND expr
   59     | expr . OR expr

    OR    shift, and go to state 54
    AND   shift, and go to state 55
    '<'   shift, and go to state 56
    '>'   shift, and go to state 57
    EQ    shift, and go to state 58
    NE    shift, and go to state 59
    GE    shift, and go to state 60
    LE    shift, and go to state 61
    '-'   shift, and go to state 62
    PLUS  shift, and go to state 63
    '*'   shift, and go to state 64
    '/'   shift, and go to state 65
    ';'   shift, and go to state 66


State 35

   47 expr: IDENTIFIER '=' . expr

    IDENTIFIER  shift, and go to state 1
    NUMBER      shift, and go to state 12
    '-'         shift, and go to state 13
    PLUS        shift, and go to state 14
    NOT         shift, and go to state 15
    '('         shift, and go to state 16

    expr  go to state 67


State 36

   42 ifstatement: IF '(' . expr ')' statement
   43            | IF '(' . expr ')' statement ELSE statement

    IDENTIFIER  shift, and go to state 1
    NUMBER      shift, and go to state 12
    '-'         shift, and go to state 13
    PLUS        shift, and go to state 14
    NOT         shift, and go to state 15
    '('         shift, and go to state 16

    expr  go to state 68


State 37

   37 whilestatement: WHILE '(' . expr ')' statement

    IDENTIFIER  shift, and go to state 1
    NUMBER      shift, and go to state 12
    '-'         shift, and go to state 13
    PLUS        shift, and go to state 14
    NOT         shift, and go to state 15
    '('         shift, and go to state 16

    expr  go to state 69


State 38

   38 forstatement: FOR '(' . forprimitive forprimitive ')' statement
   39             | FOR '(' . forprimitive forprimitive expr ')' statement

    IDENTIFIER  shift, and go to state 1
    NUMBER      shift, and go to state 12
    '-'         shift, and go to state 13
    PLUS        shift, and go to state 14
    NOT         shift, and go to state 15
    '('         shift, and go to state 16
    ';'         shift, and go to state 17

    exprstatement   go to state 70
    emptystatement  go to state 71
    forprimitive    go to state 72
    expr            go to state 34


State 39

   31 breakstatement: BREAK ';' .

    $default  reduce using rule 31 (breakstatement)


State 40

   34 continuestatement: CONTINUE ';' .

    $default  reduce using rule 34 (continuestatement)


State 41

   33 returnstatement: RETURN ';' .

    $default  reduce using rule 33 (returnstatement)


State 42

   32 returnstatement: RETURN expr . ';'
   48 expr: expr . PLUS expr
   49     | expr . '-' expr
   50     | expr . '*' expr
   51     | expr . '/' expr
   52     | expr . '<' expr
   53     | expr . '>' expr
   54     | expr . LE expr
   55     | expr . GE expr
   56     | expr . EQ expr
   57     | expr . NE expr
   58     | expr . AND expr
   59     | expr . OR expr

    OR    shift, and go to state 54
    AND   shift, and go to state 55
    '<'   shift, and go to state 56
    '>'   shift, and go to state 57
    EQ    shift, and go to state 58
    NE    shift, and go to state 59
    GE    shift, and go to state 60
    LE    shift, and go to state 61
    '-'   shift, and go to state 62
    PLUS  shift, and go to state 63
    '*'   shift, and go to state 64
    '/'   shift, and go to state 65
    ';'   shift, and go to state 73


State 43

   48 expr: expr . PLUS expr
   49     | expr . '-' expr
   50     | expr . '*' expr
   51     | expr . '/' expr
   52     | expr . '<' expr
   53     | expr . '>' expr
   54     | expr . LE expr
   55     | expr . GE expr
   56     | expr . EQ expr
   57     | expr . NE expr
   58     | expr . AND expr
   59     | expr . OR expr
   62     | '-' expr .

    $default  reduce using rule 62 (expr)


State 44

   48 expr: expr . PLUS expr
   49     | expr . '-' expr
   50     | expr . '*' expr
   51     | expr . '/' expr
   52     | expr . '<' expr
   53     | expr . '>' expr
   54     | expr . LE expr
   55     | expr . GE expr
   56     | expr . EQ expr
   57     | expr . NE expr
   58     | expr . AND expr
   59     | expr . OR expr
   61     | PLUS expr .

    $default  reduce using rule 61 (expr)


State 45

   48 expr: expr . PLUS expr
   49     | expr . '-' expr
   50     | expr . '*' expr
   51     | expr . '/' expr
   52     | expr . '<' expr
   53     | expr . '>' expr
   54     | expr . LE expr
   55     | expr . GE expr
   56     | expr . EQ expr
   57     | expr . NE expr
   58     | expr . AND expr
   59     | expr . OR expr
   60     | NOT expr .

    $default  reduce using rule 60 (expr)


State 46

   46 expr: '(' expr . ')'
   48     | expr . PLUS expr
   49     | expr . '-' expr
   50     | expr . '*' expr
   51     | expr . '/' expr
   52     | expr . '<' expr
   53     | expr . '>' expr
   54     | expr . LE expr
   55     | expr . GE expr
   56     | expr . EQ expr
   57     | expr . NE expr
   58     | expr . AND expr
   59     | expr . OR expr

    OR    shift, and go to state 54
    AND   shift, and go to state 55
    '<'   shift, and go to state 56
    '>'   shift, and go to state 57
    EQ    shift, and go to state 58
    NE    shift, and go to state 59
    GE    shift, and go to state 60
    LE    shift, and go to state 61
    '-'   shift, and go to state 62
    PLUS  shift, and go to state 63
    '*'   shift, and go to state 64
    '/'   shift, and go to state 65
    ')'   shift, and go to state 74


State 47

   28 compoundstatement: '{' '}' .

    $default  reduce using rule 28 (compoundstatement)


State 48

   29 statementlist: statement .

    $default  reduce using rule 29 (statementlist)


State 49

   27 compoundstatement: '{' statementlist . '}'
   30 statementlist: statementlist . statement

    IDENTIFIER  shift, and go to state 1
    IF          shift, and go to state 2
    WHILE       shift, and go to state 3
    FOR         shift, and go to state 4
    BREAK       shift, and go to state 5
    CONTINUE    shift, and go to state 6
    RETURN      shift, and go to state 7
    NUMBER      shift, and go to state 12
    '-'         shift, and go to state 13
    PLUS        shift, and go to state 14
    NOT         shift, and go to state 15
    '('         shift, and go to state 16
    ';'         shift, and go to state 17
    '{'         shift, and go to state 18
    '}'         shift, and go to state 75

    statement          go to state 76
    compoundstatement  go to state 25
    breakstatement     go to state 26
    returnstatement    go to state 27
    continuestatement  go to state 28
    exprstatement      go to state 29
    emptystatement     go to state 30
    whilestatement     go to state 31
    forstatement       go to state 32
    ifstatement        go to state 33
    expr               go to state 34


State 50

    0 $accept: compileunit $end .

    $default  accept


State 51

    3 compileunit: compileunit declaration .

    $default  reduce using rule 3 (compileunit)


State 52

    4 compileunit: compileunit statement .

    $default  reduce using rule 4 (compileunit)


State 53

    7 functiondeclaration: typespecifier IDENTIFIER . '(' datadeclarations ')' statement
   10 datadeclaration: typespecifier IDENTIFIER . ';'
   11                | typespecifier IDENTIFIER . '=' datavalue

    '='  shift, and go to state 77
    '('  shift, and go to state 78
    ';'  shift, and go to state 79


State 54

   59 expr: expr OR . expr

    IDENTIFIER  shift, and go to state 1
    NUMBER      shift, and go to state 12
    '-'         shift, and go to state 13
    PLUS        shift, and go to state 14
    NOT         shift, and go to state 15
    '('         shift, and go to state 16

    expr  go to state 80


State 55

   58 expr: expr AND . expr

    IDENTIFIER  shift, and go to state 1
    NUMBER      shift, and go to state 12
    '-'         shift, and go to state 13
    PLUS        shift, and go to state 14
    NOT         shift, and go to state 15
    '('         shift, and go to state 16

    expr  go to state 81


State 56

   52 expr: expr '<' . expr

    IDENTIFIER  shift, and go to state 1
    NUMBER      shift, and go to state 12
    '-'         shift, and go to state 13
    PLUS        shift, and go to state 14
    NOT         shift, and go to state 15
    '('         shift, and go to state 16

    expr  go to state 82


State 57

   53 expr: expr '>' . expr

    IDENTIFIER  shift, and go to state 1
    NUMBER      shift, and go to state 12
    '-'         shift, and go to state 13
    PLUS        shift, and go to state 14
    NOT         shift, and go to state 15
    '('         shift, and go to state 16

    expr  go to state 83


State 58

   56 expr: expr EQ . expr

    IDENTIFIER  shift, and go to state 1
    NUMBER      shift, and go to state 12
    '-'         shift, and go to state 13
    PLUS        shift, and go to state 14
    NOT         shift, and go to state 15
    '('         shift, and go to state 16

    expr  go to state 84


State 59

   57 expr: expr NE . expr

    IDENTIFIER  shift, and go to state 1
    NUMBER      shift, and go to state 12
    '-'         shift, and go to state 13
    PLUS        shift, and go to state 14
    NOT         shift, and go to state 15
    '('         shift, and go to state 16

    expr  go to state 85


State 60

   55 expr: expr GE . expr

    IDENTIFIER  shift, and go to state 1
    NUMBER      shift, and go to state 12
    '-'         shift, and go to state 13
    PLUS        shift, and go to state 14
    NOT         shift, and go to state 15
    '('         shift, and go to state 16

    expr  go to state 86


State 61

   54 expr: expr LE . expr

    IDENTIFIER  shift, and go to state 1
    NUMBER      shift, and go to state 12
    '-'         shift, and go to state 13
    PLUS        shift, and go to state 14
    NOT         shift, and go to state 15
    '('         shift, and go to state 16

    expr  go to state 87


State 62

   49 expr: expr '-' . expr

    IDENTIFIER  shift, and go to state 1
    NUMBER      shift, and go to state 12
    '-'         shift, and go to state 13
    PLUS        shift, and go to state 14
    NOT         shift, and go to state 15
    '('         shift, and go to state 16

    expr  go to state 88


State 63

   48 expr: expr PLUS . expr

    IDENTIFIER  shift, and go to state 1
    NUMBER      shift, and go to state 12
    '-'         shift, and go to state 13
    PLUS        shift, and go to state 14
    NOT         shift, and go to state 15
    '('         shift, and go to state 16

    expr  go to state 89


State 64

   50 expr: expr '*' . expr

    IDENTIFIER  shift, and go to state 1
    NUMBER      shift, and go to state 12
    '-'         shift, and go to state 13
    PLUS        shift, and go to state 14
    NOT         shift, and go to state 15
    '('         shift, and go to state 16

    expr  go to state 90


State 65

   51 expr: expr '/' . expr

    IDENTIFIER  shift, and go to state 1
    NUMBER      shift, and go to state 12
    '-'         shift, and go to state 13
    PLUS        shift, and go to state 14
    NOT         shift, and go to state 15
    '('         shift, and go to state 16

    expr  go to state 91


State 66

   35 exprstatement: expr ';' .

    $default  reduce using rule 35 (exprstatement)


State 67

   47 expr: IDENTIFIER '=' expr .
   48     | expr . PLUS expr
   49     | expr . '-' expr
   50     | expr . '*' expr
   51     | expr . '/' expr
   52     | expr . '<' expr
   53     | expr . '>' expr
   54     | expr . LE expr
   55     | expr . GE expr
   56     | expr . EQ expr
   57     | expr . NE expr
   58     | expr . AND expr
   59     | expr . OR expr

    OR    shift, and go to state 54
    AND   shift, and go to state 55
    '<'   shift, and go to state 56
    '>'   shift, and go to state 57
    EQ    shift, and go to state 58
    NE    shift, and go to state 59
    GE    shift, and go to state 60
    LE    shift, and go to state 61
    '-'   shift, and go to state 62
    PLUS  shift, and go to state 63
    '*'   shift, and go to state 64
    '/'   shift, and go to state 65

    $default  reduce using rule 47 (expr)


State 68

   42 ifstatement: IF '(' expr . ')' statement
   43            | IF '(' expr . ')' statement ELSE statement
   48 expr: expr . PLUS expr
   49     | expr . '-' expr
   50     | expr . '*' expr
   51     | expr . '/' expr
   52     | expr . '<' expr
   53     | expr . '>' expr
   54     | expr . LE expr
   55     | expr . GE expr
   56     | expr . EQ expr
   57     | expr . NE expr
   58     | expr . AND expr
   59     | expr . OR expr

    OR    shift, and go to state 54
    AND   shift, and go to state 55
    '<'   shift, and go to state 56
    '>'   shift, and go to state 57
    EQ    shift, and go to state 58
    NE    shift, and go to state 59
    GE    shift, and go to state 60
    LE    shift, and go to state 61
    '-'   shift, and go to state 62
    PLUS  shift, and go to state 63
    '*'   shift, and go to state 64
    '/'   shift, and go to state 65
    ')'   shift, and go to state 92


State 69

   37 whilestatement: WHILE '(' expr . ')' statement
   48 expr: expr . PLUS expr
   49     | expr . '-' expr
   50     | expr . '*' expr
   51     | expr . '/' expr
   52     | expr . '<' expr
   53     | expr . '>' expr
   54     | expr . LE expr
   55     | expr . GE expr
   56     | expr . EQ expr
   57     | expr . NE expr
   58     | expr . AND expr
   59     | expr . OR expr

    OR    shift, and go to state 54
    AND   shift, and go to state 55
    '<'   shift, and go to state 56
    '>'   shift, and go to state 57
    EQ    shift, and go to state 58
    NE    shift, and go to state 59
    GE    shift, and go to state 60
    LE    shift, and go to state 61
    '-'   shift, and go to state 62
    PLUS  shift, and go to state 63
    '*'   shift, and go to state 64
    '/'   shift, and go to state 65
    ')'   shift, and go to state 93


State 70

   40 forprimitive: exprstatement .

    $default  reduce using rule 40 (forprimitive)


State 71

   41 forprimitive: emptystatement .

    $default  reduce using rule 41 (forprimitive)


State 72

   38 forstatement: FOR '(' forprimitive . forprimitive ')' statement
   39             | FOR '(' forprimitive . forprimitive expr ')' statement

    IDENTIFIER  shift, and go to state 1
    NUMBER      shift, and go to state 12
    '-'         shift, and go to state 13
    PLUS        shift, and go to state 14
    NOT         shift, and go to state 15
    '('         shift, and go to state 16
    ';'         shift, and go to state 17

    exprstatement   go to state 70
    emptystatement  go to state 71
    forprimitive    go to state 94
    expr            go to state 34


State 73

   32 returnstatement: RETURN expr ';' .

    $default  reduce using rule 32 (returnstatement)


State 74

   46 expr: '(' expr ')' .

    $default  reduce using rule 46 (expr)


State 75

   27 compoundstatement: '{' statementlist '}' .

    $default  reduce using rule 27 (compoundstatement)


State 76

   30 statementlist: statementlist statement .

    $default  reduce using rule 30 (statementlist)


State 77

   11 datadeclaration: typespecifier IDENTIFIER '=' . datavalue

    STRING  shift, and go to state 95
    NUMBER  shift, and go to state 96

    datavalue  go to state 97


State 78

    7 functiondeclaration: typespecifier IDENTIFIER '(' . datadeclarations ')' statement

    INT_TYPE     shift, and go to state 8
    DOUBLE_TYPE  shift, and go to state 9
    VOID_TYPE    shift, and go to state 10
    STRING_TYPE  shift, and go to state 11

    datadeclarations  go to state 98
    datadeclaration   go to state 99
    typespecifier     go to state 100


State 79

   10 datadeclaration: typespecifier IDENTIFIER ';' .

    $default  reduce using rule 10 (datadeclaration)


State 80

   48 expr: expr . PLUS expr
   49     | expr . '-' expr
   50     | expr . '*' expr
   51     | expr . '/' expr
   52     | expr . '<' expr
   53     | expr . '>' expr
   54     | expr . LE expr
   55     | expr . GE expr
   56     | expr . EQ expr
   57     | expr . NE expr
   58     | expr . AND expr
   59     | expr . OR expr
   59     | expr OR expr .

    AND   shift, and go to state 55
    '<'   shift, and go to state 56
    '>'   shift, and go to state 57
    EQ    shift, and go to state 58
    NE    shift, and go to state 59
    GE    shift, and go to state 60
    LE    shift, and go to state 61
    '-'   shift, and go to state 62
    PLUS  shift, and go to state 63
    '*'   shift, and go to state 64
    '/'   shift, and go to state 65

    $default  reduce using rule 59 (expr)


State 81

   48 expr: expr . PLUS expr
   49     | expr . '-' expr
   50     | expr . '*' expr
   51     | expr . '/' expr
   52     | expr . '<' expr
   53     | expr . '>' expr
   54     | expr . LE expr
   55     | expr . GE expr
   56     | expr . EQ expr
   57     | expr . NE expr
   58     | expr . AND expr
   58     | expr AND expr .
   59     | expr . OR expr

    '<'   shift, and go to state 56
    '>'   shift, and go to state 57
    EQ    shift, and go to state 58
    NE    shift, and go to state 59
    GE    shift, and go to state 60
    LE    shift, and go to state 61
    '-'   shift, and go to state 62
    PLUS  shift, and go to state 63
    '*'   shift, and go to state 64
    '/'   shift, and go to state 65

    $default  reduce using rule 58 (expr)


State 82

   48 expr: expr . PLUS expr
   49     | expr . '-' expr
   50     | expr . '*' expr
   51     | expr . '/' expr
   52     | expr . '<' expr
   52     | expr '<' expr .
   53     | expr . '>' expr
   54     | expr . LE expr
   55     | expr . GE expr
   56     | expr . EQ expr
   57     | expr . NE expr
   58     | expr . AND expr
   59     | expr . OR expr

    '-'   shift, and go to state 62
    PLUS  shift, and go to state 63
    '*'   shift, and go to state 64
    '/'   shift, and go to state 65

    '<'  error (nonassociative)
    '>'  error (nonassociative)
    EQ   error (nonassociative)
    NE   error (nonassociative)
    GE   error (nonassociative)
    LE   error (nonassociative)

    $default  reduce using rule 52 (expr)


State 83

   48 expr: expr . PLUS expr
   49     | expr . '-' expr
   50     | expr . '*' expr
   51     | expr . '/' expr
   52     | expr . '<' expr
   53     | expr . '>' expr
   53     | expr '>' expr .
   54     | expr . LE expr
   55     | expr . GE expr
   56     | expr . EQ expr
   57     | expr . NE expr
   58     | expr . AND expr
   59     | expr . OR expr

    '-'   shift, and go to state 62
    PLUS  shift, and go to state 63
    '*'   shift, and go to state 64
    '/'   shift, and go to state 65

    '<'  error (nonassociative)
    '>'  error (nonassociative)
    EQ   error (nonassociative)
    NE   error (nonassociative)
    GE   error (nonassociative)
    LE   error (nonassociative)

    $default  reduce using rule 53 (expr)


State 84

   48 expr: expr . PLUS expr
   49     | expr . '-' expr
   50     | expr . '*' expr
   51     | expr . '/' expr
   52     | expr . '<' expr
   53     | expr . '>' expr
   54     | expr . LE expr
   55     | expr . GE expr
   56     | expr . EQ expr
   56     | expr EQ expr .
   57     | expr . NE expr
   58     | expr . AND expr
   59     | expr . OR expr

    '-'   shift, and go to state 62
    PLUS  shift, and go to state 63
    '*'   shift, and go to state 64
    '/'   shift, and go to state 65

    '<'  error (nonassociative)
    '>'  error (nonassociative)
    EQ   error (nonassociative)
    NE   error (nonassociative)
    GE   error (nonassociative)
    LE   error (nonassociative)

    $default  reduce using rule 56 (expr)


State 85

   48 expr: expr . PLUS expr
   49     | expr . '-' expr
   50     | expr . '*' expr
   51     | expr . '/' expr
   52     | expr . '<' expr
   53     | expr . '>' expr
   54     | expr . LE expr
   55     | expr . GE expr
   56     | expr . EQ expr
   57     | expr . NE expr
   57     | expr NE expr .
   58     | expr . AND expr
   59     | expr . OR expr

    '-'   shift, and go to state 62
    PLUS  shift, and go to state 63
    '*'   shift, and go to state 64
    '/'   shift, and go to state 65

    '<'  error (nonassociative)
    '>'  error (nonassociative)
    EQ   error (nonassociative)
    NE   error (nonassociative)
    GE   error (nonassociative)
    LE   error (nonassociative)

    $default  reduce using rule 57 (expr)


State 86

   48 expr: expr . PLUS expr
   49     | expr . '-' expr
   50     | expr . '*' expr
   51     | expr . '/' expr
   52     | expr . '<' expr
   53     | expr . '>' expr
   54     | expr . LE expr
   55     | expr . GE expr
   55     | expr GE expr .
   56     | expr . EQ expr
   57     | expr . NE expr
   58     | expr . AND expr
   59     | expr . OR expr

    '-'   shift, and go to state 62
    PLUS  shift, and go to state 63
    '*'   shift, and go to state 64
    '/'   shift, and go to state 65

    '<'  error (nonassociative)
    '>'  error (nonassociative)
    EQ   error (nonassociative)
    NE   error (nonassociative)
    GE   error (nonassociative)
    LE   error (nonassociative)

    $default  reduce using rule 55 (expr)


State 87

   48 expr: expr . PLUS expr
   49     | expr . '-' expr
   50     | expr . '*' expr
   51     | expr . '/' expr
   52     | expr . '<' expr
   53     | expr . '>' expr
   54     | expr . LE expr
   54     | expr LE expr .
   55     | expr . GE expr
   56     | expr . EQ expr
   57     | expr . NE expr
   58     | expr . AND expr
   59     | expr . OR expr

    '-'   shift, and go to state 62
    PLUS  shift, and go to state 63
    '*'   shift, and go to state 64
    '/'   shift, and go to state 65

    '<'  error (nonassociative)
    '>'  error (nonassociative)
    EQ   error (nonassociative)
    NE   error (nonassociative)
    GE   error (nonassociative)
    LE   error (nonassociative)

    $default  reduce using rule 54 (expr)


State 88

   48 expr: expr . PLUS expr
   49     | expr . '-' expr
   49     | expr '-' expr .
   50     | expr . '*' expr
   51     | expr . '/' expr
   52     | expr . '<' expr
   53     | expr . '>' expr
   54     | expr . LE expr
   55     | expr . GE expr
   56     | expr . EQ expr
   57     | expr . NE expr
   58     | expr . AND expr
   59     | expr . OR expr

    '*'  shift, and go to state 64
    '/'  shift, and go to state 65

    $default  reduce using rule 49 (expr)


State 89

   48 expr: expr . PLUS expr
   48     | expr PLUS expr .
   49     | expr . '-' expr
   50     | expr . '*' expr
   51     | expr . '/' expr
   52     | expr . '<' expr
   53     | expr . '>' expr
   54     | expr . LE expr
   55     | expr . GE expr
   56     | expr . EQ expr
   57     | expr . NE expr
   58     | expr . AND expr
   59     | expr . OR expr

    '*'  shift, and go to state 64
    '/'  shift, and go to state 65

    $default  reduce using rule 48 (expr)


State 90

   48 expr: expr . PLUS expr
   49     | expr . '-' expr
   50     | expr . '*' expr
   50     | expr '*' expr .
   51     | expr . '/' expr
   52     | expr . '<' expr
   53     | expr . '>' expr
   54     | expr . LE expr
   55     | expr . GE expr
   56     | expr . EQ expr
   57     | expr . NE expr
   58     | expr . AND expr
   59     | expr . OR expr

    $default  reduce using rule 50 (expr)


State 91

   48 expr: expr . PLUS expr
   49     | expr . '-' expr
   50     | expr . '*' expr
   51     | expr . '/' expr
   51     | expr '/' expr .
   52     | expr . '<' expr
   53     | expr . '>' expr
   54     | expr . LE expr
   55     | expr . GE expr
   56     | expr . EQ expr
   57     | expr . NE expr
   58     | expr . AND expr
   59     | expr . OR expr

    $default  reduce using rule 51 (expr)


State 92

   42 ifstatement: IF '(' expr ')' . statement
   43            | IF '(' expr ')' . statement ELSE statement

    IDENTIFIER  shift, and go to state 1
    IF          shift, and go to state 2
    WHILE       shift, and go to state 3
    FOR         shift, and go to state 4
    BREAK       shift, and go to state 5
    CONTINUE    shift, and go to state 6
    RETURN      shift, and go to state 7
    NUMBER      shift, and go to state 12
    '-'         shift, and go to state 13
    PLUS        shift, and go to state 14
    NOT         shift, and go to state 15
    '('         shift, and go to state 16
    ';'         shift, and go to state 17
    '{'         shift, and go to state 18

    statement          go to state 101
    compoundstatement  go to state 25
    breakstatement     go to state 26
    returnstatement    go to state 27
    continuestatement  go to state 28
    exprstatement      go to state 29
    emptystatement     go to state 30
    whilestatement     go to state 31
    forstatement       go to state 32
    ifstatement        go to state 33
    expr               go to state 34


State 93

   37 whilestatement: WHILE '(' expr ')' . statement

    IDENTIFIER  shift, and go to state 1
    IF          shift, and go to state 2
    WHILE       shift, and go to state 3
    FOR         shift, and go to state 4
    BREAK       shift, and go to state 5
    CONTINUE    shift, and go to state 6
    RETURN      shift, and go to state 7
    NUMBER      shift, and go to state 12
    '-'         shift, and go to state 13
    PLUS        shift, and go to state 14
    NOT         shift, and go to state 15
    '('         shift, and go to state 16
    ';'         shift, and go to state 17
    '{'         shift, and go to state 18

    statement          go to state 102
    compoundstatement  go to state 25
    breakstatement     go to state 26
    returnstatement    go to state 27
    continuestatement  go to state 28
    exprstatement      go to state 29
    emptystatement     go to state 30
    whilestatement     go to state 31
    forstatement       go to state 32
    ifstatement        go to state 33
    expr               go to state 34


State 94

   38 forstatement: FOR '(' forprimitive forprimitive . ')' statement
   39             | FOR '(' forprimitive forprimitive . expr ')' statement

    IDENTIFIER  shift, and go to state 1
    NUMBER      shift, and go to state 12
    '-'         shift, and go to state 13
    PLUS        shift, and go to state 14
    NOT         shift, and go to state 15
    '('         shift, and go to state 16
    ')'         shift, and go to state 103

    expr  go to state 104


State 95

   17 datavalue: STRING .

    $default  reduce using rule 17 (datavalue)


State 96

   16 datavalue: NUMBER .

    $default  reduce using rule 16 (datavalue)


State 97

   11 datadeclaration: typespecifier IDENTIFIER '=' datavalue .

    $default  reduce using rule 11 (datadeclaration)


State 98

    7 functiondeclaration: typespecifier IDENTIFIER '(' datadeclarations . ')' statement
    9 datadeclarations: datadeclarations . ',' datadeclaration

    ')'  shift, and go to state 105
    ','  shift, and go to state 106


State 99

    8 datadeclarations: datadeclaration .

    $default  reduce using rule 8 (datadeclarations)


State 100

   10 datadeclaration: typespecifier . IDENTIFIER ';'
   11                | typespecifier . IDENTIFIER '=' datavalue

    IDENTIFIER  shift, and go to state 107


State 101

   42 ifstatement: IF '(' expr ')' statement .
   43            | IF '(' expr ')' statement . ELSE statement

    ELSE  shift, and go to state 108

    $default  reduce using rule 42 (ifstatement)


State 102

   37 whilestatement: WHILE '(' expr ')' statement .

    $default  reduce using rule 37 (whilestatement)


State 103

   38 forstatement: FOR '(' forprimitive forprimitive ')' . statement

    IDENTIFIER  shift, and go to state 1
    IF          shift, and go to state 2
    WHILE       shift, and go to state 3
    FOR         shift, and go to state 4
    BREAK       shift, and go to state 5
    CONTINUE    shift, and go to state 6
    RETURN      shift, and go to state 7
    NUMBER      shift, and go to state 12
    '-'         shift, and go to state 13
    PLUS        shift, and go to state 14
    NOT         shift, and go to state 15
    '('         shift, and go to state 16
    ';'         shift, and go to state 17
    '{'         shift, and go to state 18

    statement          go to state 109
    compoundstatement  go to state 25
    breakstatement     go to state 26
    returnstatement    go to state 27
    continuestatement  go to state 28
    exprstatement      go to state 29
    emptystatement     go to state 30
    whilestatement     go to state 31
    forstatement       go to state 32
    ifstatement        go to state 33
    expr               go to state 34


State 104

   39 forstatement: FOR '(' forprimitive forprimitive expr . ')' statement
   48 expr: expr . PLUS expr
   49     | expr . '-' expr
   50     | expr . '*' expr
   51     | expr . '/' expr
   52     | expr . '<' expr
   53     | expr . '>' expr
   54     | expr . LE expr
   55     | expr . GE expr
   56     | expr . EQ expr
   57     | expr . NE expr
   58     | expr . AND expr
   59     | expr . OR expr

    OR    shift, and go to state 54
    AND   shift, and go to state 55
    '<'   shift, and go to state 56
    '>'   shift, and go to state 57
    EQ    shift, and go to state 58
    NE    shift, and go to state 59
    GE    shift, and go to state 60
    LE    shift, and go to state 61
    '-'   shift, and go to state 62
    PLUS  shift, and go to state 63
    '*'   shift, and go to state 64
    '/'   shift, and go to state 65
    ')'   shift, and go to state 110


State 105

    7 functiondeclaration: typespecifier IDENTIFIER '(' datadeclarations ')' . statement

    IDENTIFIER  shift, and go to state 1
    IF          shift, and go to state 2
    WHILE       shift, and go to state 3
    FOR         shift, and go to state 4
    BREAK       shift, and go to state 5
    CONTINUE    shift, and go to state 6
    RETURN      shift, and go to state 7
    NUMBER      shift, and go to state 12
    '-'         shift, and go to state 13
    PLUS        shift, and go to state 14
    NOT         shift, and go to state 15
    '('         shift, and go to state 16
    ';'         shift, and go to state 17
    '{'         shift, and go to state 18

    statement          go to state 111
    compoundstatement  go to state 25
    breakstatement     go to state 26
    returnstatement    go to state 27
    continuestatement  go to state 28
    exprstatement      go to state 29
    emptystatement     go to state 30
    whilestatement     go to state 31
    forstatement       go to state 32
    ifstatement        go to state 33
    expr               go to state 34


State 106

    9 datadeclarations: datadeclarations ',' . datadeclaration

    INT_TYPE     shift, and go to state 8
    DOUBLE_TYPE  shift, and go to state 9
    VOID_TYPE    shift, and go to state 10
    STRING_TYPE  shift, and go to state 11

    datadeclaration  go to state 112
    typespecifier    go to state 100


State 107

   10 datadeclaration: typespecifier IDENTIFIER . ';'
   11                | typespecifier IDENTIFIER . '=' datavalue

    '='  shift, and go to state 77
    ';'  shift, and go to state 79


State 108

   43 ifstatement: IF '(' expr ')' statement ELSE . statement

    IDENTIFIER  shift, and go to state 1
    IF          shift, and go to state 2
    WHILE       shift, and go to state 3
    FOR         shift, and go to state 4
    BREAK       shift, and go to state 5
    CONTINUE    shift, and go to state 6
    RETURN      shift, and go to state 7
    NUMBER      shift, and go to state 12
    '-'         shift, and go to state 13
    PLUS        shift, and go to state 14
    NOT         shift, and go to state 15
    '('         shift, and go to state 16
    ';'         shift, and go to state 17
    '{'         shift, and go to state 18

    statement          go to state 113
    compoundstatement  go to state 25
    breakstatement     go to state 26
    returnstatement    go to state 27
    continuestatement  go to state 28
    exprstatement      go to state 29
    emptystatement     go to state 30
    whilestatement     go to state 31
    forstatement       go to state 32
    ifstatement        go to state 33
    expr               go to state 34


State 109

   38 forstatement: FOR '(' forprimitive forprimitive ')' statement .

    $default  reduce using rule 38 (forstatement)


State 110

   39 forstatement: FOR '(' forprimitive forprimitive expr ')' . statement

    IDENTIFIER  shift, and go to state 1
    IF          shift, and go to state 2
    WHILE       shift, and go to state 3
    FOR         shift, and go to state 4
    BREAK       shift, and go to state 5
    CONTINUE    shift, and go to state 6
    RETURN      shift, and go to state 7
    NUMBER      shift, and go to state 12
    '-'         shift, and go to state 13
    PLUS        shift, and go to state 14
    NOT         shift, and go to state 15
    '('         shift, and go to state 16
    ';'         shift, and go to state 17
    '{'         shift, and go to state 18

    statement          go to state 114
    compoundstatement  go to state 25
    breakstatement     go to state 26
    returnstatement    go to state 27
    continuestatement  go to state 28
    exprstatement      go to state 29
    emptystatement     go to state 30
    whilestatement     go to state 31
    forstatement       go to state 32
    ifstatement        go to state 33
    expr               go to state 34


State 111

    7 functiondeclaration: typespecifier IDENTIFIER '(' datadeclarations ')' statement .

    $default  reduce using rule 7 (functiondeclaration)


State 112

    9 datadeclarations: datadeclarations ',' datadeclaration .

    $default  reduce using rule 9 (datadeclarations)


State 113

   43 ifstatement: IF '(' expr ')' statement ELSE statement .

    $default  reduce using rule 43 (ifstatement)


State 114

   39 forstatement: FOR '(' forprimitive forprimitive expr ')' statement .

    $default  reduce using rule 39 (forstatement)
